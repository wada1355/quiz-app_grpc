// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: quiz.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	QuizService_PlayQuiz_FullMethodName = "/quizapp.QuizService/PlayQuiz"
)

// QuizServiceClient is the client API for QuizService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuizServiceClient interface {
	PlayQuiz(ctx context.Context, opts ...grpc.CallOption) (QuizService_PlayQuizClient, error)
}

type quizServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQuizServiceClient(cc grpc.ClientConnInterface) QuizServiceClient {
	return &quizServiceClient{cc}
}

func (c *quizServiceClient) PlayQuiz(ctx context.Context, opts ...grpc.CallOption) (QuizService_PlayQuizClient, error) {
	stream, err := c.cc.NewStream(ctx, &QuizService_ServiceDesc.Streams[0], QuizService_PlayQuiz_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &quizServicePlayQuizClient{stream}
	return x, nil
}

type QuizService_PlayQuizClient interface {
	Send(*QuizReq) error
	Recv() (*QuizRes, error)
	grpc.ClientStream
}

type quizServicePlayQuizClient struct {
	grpc.ClientStream
}

func (x *quizServicePlayQuizClient) Send(m *QuizReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *quizServicePlayQuizClient) Recv() (*QuizRes, error) {
	m := new(QuizRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// QuizServiceServer is the server API for QuizService service.
// All implementations must embed UnimplementedQuizServiceServer
// for forward compatibility
type QuizServiceServer interface {
	PlayQuiz(QuizService_PlayQuizServer) error
	mustEmbedUnimplementedQuizServiceServer()
}

// UnimplementedQuizServiceServer must be embedded to have forward compatible implementations.
type UnimplementedQuizServiceServer struct {
}

func (UnimplementedQuizServiceServer) PlayQuiz(QuizService_PlayQuizServer) error {
	return status.Errorf(codes.Unimplemented, "method PlayQuiz not implemented")
}
func (UnimplementedQuizServiceServer) mustEmbedUnimplementedQuizServiceServer() {}

// UnsafeQuizServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuizServiceServer will
// result in compilation errors.
type UnsafeQuizServiceServer interface {
	mustEmbedUnimplementedQuizServiceServer()
}

func RegisterQuizServiceServer(s grpc.ServiceRegistrar, srv QuizServiceServer) {
	s.RegisterService(&QuizService_ServiceDesc, srv)
}

func _QuizService_PlayQuiz_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(QuizServiceServer).PlayQuiz(&quizServicePlayQuizServer{stream})
}

type QuizService_PlayQuizServer interface {
	Send(*QuizRes) error
	Recv() (*QuizReq, error)
	grpc.ServerStream
}

type quizServicePlayQuizServer struct {
	grpc.ServerStream
}

func (x *quizServicePlayQuizServer) Send(m *QuizRes) error {
	return x.ServerStream.SendMsg(m)
}

func (x *quizServicePlayQuizServer) Recv() (*QuizReq, error) {
	m := new(QuizReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// QuizService_ServiceDesc is the grpc.ServiceDesc for QuizService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QuizService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "quizapp.QuizService",
	HandlerType: (*QuizServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PlayQuiz",
			Handler:       _QuizService_PlayQuiz_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "quiz.proto",
}
