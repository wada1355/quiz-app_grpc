// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: quiz.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	QuizService_Hello_FullMethodName = "/quizapp.QuizService/Hello"
	QuizService_Quiz_FullMethodName  = "/quizapp.QuizService/Quiz"
)

// QuizServiceClient is the client API for QuizService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuizServiceClient interface {
	Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
	Quiz(ctx context.Context, opts ...grpc.CallOption) (QuizService_QuizClient, error)
}

type quizServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQuizServiceClient(cc grpc.ClientConnInterface) QuizServiceClient {
	return &quizServiceClient{cc}
}

func (c *quizServiceClient) Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, QuizService_Hello_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quizServiceClient) Quiz(ctx context.Context, opts ...grpc.CallOption) (QuizService_QuizClient, error) {
	stream, err := c.cc.NewStream(ctx, &QuizService_ServiceDesc.Streams[0], QuizService_Quiz_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &quizServiceQuizClient{stream}
	return x, nil
}

type QuizService_QuizClient interface {
	Send(*QuizRequest) error
	Recv() (*QuizResponse, error)
	grpc.ClientStream
}

type quizServiceQuizClient struct {
	grpc.ClientStream
}

func (x *quizServiceQuizClient) Send(m *QuizRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *quizServiceQuizClient) Recv() (*QuizResponse, error) {
	m := new(QuizResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// QuizServiceServer is the server API for QuizService service.
// All implementations must embed UnimplementedQuizServiceServer
// for forward compatibility
type QuizServiceServer interface {
	Hello(context.Context, *HelloRequest) (*HelloResponse, error)
	Quiz(QuizService_QuizServer) error
	mustEmbedUnimplementedQuizServiceServer()
}

// UnimplementedQuizServiceServer must be embedded to have forward compatible implementations.
type UnimplementedQuizServiceServer struct {
}

func (UnimplementedQuizServiceServer) Hello(context.Context, *HelloRequest) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (UnimplementedQuizServiceServer) Quiz(QuizService_QuizServer) error {
	return status.Errorf(codes.Unimplemented, "method Quiz not implemented")
}
func (UnimplementedQuizServiceServer) mustEmbedUnimplementedQuizServiceServer() {}

// UnsafeQuizServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuizServiceServer will
// result in compilation errors.
type UnsafeQuizServiceServer interface {
	mustEmbedUnimplementedQuizServiceServer()
}

func RegisterQuizServiceServer(s grpc.ServiceRegistrar, srv QuizServiceServer) {
	s.RegisterService(&QuizService_ServiceDesc, srv)
}

func _QuizService_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizServiceServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuizService_Hello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizServiceServer).Hello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuizService_Quiz_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(QuizServiceServer).Quiz(&quizServiceQuizServer{stream})
}

type QuizService_QuizServer interface {
	Send(*QuizResponse) error
	Recv() (*QuizRequest, error)
	grpc.ServerStream
}

type quizServiceQuizServer struct {
	grpc.ServerStream
}

func (x *quizServiceQuizServer) Send(m *QuizResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *quizServiceQuizServer) Recv() (*QuizRequest, error) {
	m := new(QuizRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// QuizService_ServiceDesc is the grpc.ServiceDesc for QuizService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QuizService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "quizapp.QuizService",
	HandlerType: (*QuizServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _QuizService_Hello_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Quiz",
			Handler:       _QuizService_Quiz_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "quiz.proto",
}
